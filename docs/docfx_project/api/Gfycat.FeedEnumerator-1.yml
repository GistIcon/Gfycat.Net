### YamlMime:ManagedReference
items:
- uid: Gfycat.FeedEnumerator`1
  commentId: T:Gfycat.FeedEnumerator`1
  id: FeedEnumerator`1
  parent: Gfycat
  children:
  - Gfycat.FeedEnumerator`1.Current
  - Gfycat.FeedEnumerator`1.Dispose
  - Gfycat.FeedEnumerator`1.MoveNext(CancellationToken)
  langs:
  - csharp
  - vb
  name: FeedEnumerator<T>
  nameWithType: FeedEnumerator<T>
  fullName: Gfycat.FeedEnumerator<T>
  type: Class
  source:
    id: FeedEnumerator
    path: ''
    startLine: 1365
  assemblies:
  - cs.temp.dll
  namespace: Gfycat
  summary: "\nEnumerates the contents of an <xref href=\"Gfycat.IFeed%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: 'public class FeedEnumerator<T> : IAsyncEnumerator<T>'
    typeParameters:
    - id: T
      description: The type of item to enumerate
    content.vb: >-
      Public Class FeedEnumerator(Of T)
          Inherits IAsyncEnumerator(Of T)
  inheritance:
  - System.Object
  nameWithType.vb: FeedEnumerator(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Gfycat.FeedEnumerator(Of T)
  name.vb: FeedEnumerator(Of T)
- uid: Gfycat.FeedEnumerator`1.Current
  commentId: P:Gfycat.FeedEnumerator`1.Current
  id: Current
  parent: Gfycat.FeedEnumerator`1
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: FeedEnumerator<T>.Current
  fullName: Gfycat.FeedEnumerator<T>.Current
  type: Property
  source:
    id: Current
    path: ''
    startLine: 1385
  assemblies:
  - cs.temp.dll
  namespace: Gfycat
  summary: "\nGets the element in the collection at the current position of the enumerator\n"
  example: []
  syntax:
    content: public T Current { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property Current As T
  overload: Gfycat.FeedEnumerator`1.Current*
  nameWithType.vb: FeedEnumerator(Of T).Current
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Gfycat.FeedEnumerator(Of T).Current
- uid: Gfycat.FeedEnumerator`1.Dispose
  commentId: M:Gfycat.FeedEnumerator`1.Dispose
  id: Dispose
  parent: Gfycat.FeedEnumerator`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: FeedEnumerator<T>.Dispose()
  fullName: Gfycat.FeedEnumerator<T>.Dispose()
  type: Method
  source:
    id: Dispose
    path: ''
    startLine: 1390
  assemblies:
  - cs.temp.dll
  namespace: Gfycat
  summary: "\n\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Gfycat.FeedEnumerator`1.Dispose*
  nameWithType.vb: FeedEnumerator(Of T).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Gfycat.FeedEnumerator(Of T).Dispose()
- uid: Gfycat.FeedEnumerator`1.MoveNext(CancellationToken)
  commentId: M:Gfycat.FeedEnumerator`1.MoveNext(CancellationToken)
  id: MoveNext(CancellationToken)
  parent: Gfycat.FeedEnumerator`1
  langs:
  - csharp
  - vb
  name: MoveNext(CancellationToken)
  nameWithType: FeedEnumerator<T>.MoveNext(CancellationToken)
  fullName: Gfycat.FeedEnumerator<T>.MoveNext(CancellationToken)
  type: Method
  source:
    id: MoveNext
    path: ''
    startLine: 1400
  assemblies:
  - cs.temp.dll
  namespace: Gfycat
  summary: "\nAttempts to move to the next item in the current page of content. If there is no content in the current page, it retrieves the next page and returns the result of that content's move next\n"
  example: []
  syntax:
    content: public Task<bool> MoveNext(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: CancellationToken
      description: ''
    return:
      type: Task{System.Boolean}
      description: ''
    content.vb: Public Function MoveNext(cancellationToken As CancellationToken) As Task(Of Boolean)
  overload: Gfycat.FeedEnumerator`1.MoveNext*
  nameWithType.vb: FeedEnumerator(Of T).MoveNext(CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Gfycat.FeedEnumerator(Of T).MoveNext(CancellationToken)
references:
- uid: Gfycat.IFeed`1
  commentId: T:Gfycat.IFeed`1
  isExternal: false
  name: IFeed<T>
  nameWithType: IFeed<T>
  fullName: Gfycat.IFeed<T>
  nameWithType.vb: IFeed(Of T)
  fullName.vb: Gfycat.IFeed(Of T)
  name.vb: IFeed(Of T)
  spec.csharp:
  - uid: Gfycat.IFeed`1
    name: IFeed
    nameWithType: IFeed
    fullName: Gfycat.IFeed
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Gfycat.IFeed`1
    name: IFeed
    nameWithType: IFeed
    fullName: Gfycat.IFeed
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Gfycat
  commentId: N:Gfycat
  isExternal: false
  name: Gfycat
  nameWithType: Gfycat
  fullName: Gfycat
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Gfycat.FeedEnumerator`1.Current*
  commentId: Overload:Gfycat.FeedEnumerator`1.Current
  isExternal: false
  name: Current
  nameWithType: FeedEnumerator<T>.Current
  fullName: Gfycat.FeedEnumerator<T>.Current
  nameWithType.vb: FeedEnumerator(Of T).Current
  fullName.vb: Gfycat.FeedEnumerator(Of T).Current
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Gfycat.FeedEnumerator`1.Dispose*
  commentId: Overload:Gfycat.FeedEnumerator`1.Dispose
  isExternal: false
  name: Dispose
  nameWithType: FeedEnumerator<T>.Dispose
  fullName: Gfycat.FeedEnumerator<T>.Dispose
  nameWithType.vb: FeedEnumerator(Of T).Dispose
  fullName.vb: Gfycat.FeedEnumerator(Of T).Dispose
- uid: Gfycat.FeedEnumerator`1.MoveNext*
  commentId: Overload:Gfycat.FeedEnumerator`1.MoveNext
  isExternal: false
  name: MoveNext
  nameWithType: FeedEnumerator<T>.MoveNext
  fullName: Gfycat.FeedEnumerator<T>.MoveNext
  nameWithType.vb: FeedEnumerator(Of T).MoveNext
  fullName.vb: Gfycat.FeedEnumerator(Of T).MoveNext
- uid: CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: Task{System.Boolean}
  commentId: '!:Task{System.Boolean}'
  definition: Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
