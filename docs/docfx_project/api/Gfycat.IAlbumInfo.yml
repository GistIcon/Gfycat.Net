### YamlMime:ManagedReference
items:
- uid: Gfycat.IAlbumInfo
  commentId: T:Gfycat.IAlbumInfo
  id: IAlbumInfo
  parent: Gfycat
  children:
  - Gfycat.IAlbumInfo.Published
  - Gfycat.IAlbumInfo.Subfolders
  langs:
  - csharp
  - vb
  name: IAlbumInfo
  nameWithType: IAlbumInfo
  fullName: Gfycat.IAlbumInfo
  type: Interface
  source:
    id: IAlbumInfo
    path: ''
    startLine: 3353
  assemblies:
  - cs.temp.dll
  namespace: Gfycat
  summary: "\nDefines an album's basic information\n"
  example: []
  syntax:
    content: 'public interface IAlbumInfo : IFolderInfo, IFolder'
    content.vb: >-
      Public Interface IAlbumInfo
          Inherits IFolderInfo
  inheritedMembers:
  - Gfycat.IFolderInfo.GetContentsAsync(Gfycat.RequestOptions)
  - Gfycat.IFolderInfo.MoveFolderAsync(Gfycat.IFolderInfo,Gfycat.RequestOptions)
  - Gfycat.IFolderInfo.CreateNewFolderAsync(System.String,Gfycat.RequestOptions)
  - Gfycat.IFolder.Id
  - Gfycat.IFolder.Title
  - Gfycat.IFolder.ModifyTitleAsync(System.String,Gfycat.RequestOptions)
  - Gfycat.IFolder.DeleteAsync(Gfycat.RequestOptions)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Gfycat.IAlbumInfo.Subfolders
  commentId: P:Gfycat.IAlbumInfo.Subfolders
  id: Subfolders
  parent: Gfycat.IAlbumInfo
  langs:
  - csharp
  - vb
  name: Subfolders
  nameWithType: IAlbumInfo.Subfolders
  fullName: Gfycat.IAlbumInfo.Subfolders
  type: Property
  source:
    id: Subfolders
    path: ''
    startLine: 3358
  assemblies:
  - cs.temp.dll
  namespace: Gfycat
  summary: "\nGets all folders inside this folder\n"
  example: []
  syntax:
    content: IReadOnlyCollection<IAlbumInfo> Subfolders { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Gfycat.IAlbumInfo}
    content.vb: ReadOnly Property Subfolders As IReadOnlyCollection(Of IAlbumInfo)
  overload: Gfycat.IAlbumInfo.Subfolders*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Gfycat.IAlbumInfo.Published
  commentId: P:Gfycat.IAlbumInfo.Published
  id: Published
  parent: Gfycat.IAlbumInfo
  langs:
  - csharp
  - vb
  name: Published
  nameWithType: IAlbumInfo.Published
  fullName: Gfycat.IAlbumInfo.Published
  type: Property
  source:
    id: Published
    path: ''
    startLine: 3362
  assemblies:
  - cs.temp.dll
  namespace: Gfycat
  summary: "\nGets whether this album is published or not\n"
  example: []
  syntax:
    content: bool Published { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property Published As Boolean
  overload: Gfycat.IAlbumInfo.Published*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Gfycat
  commentId: N:Gfycat
  isExternal: false
  name: Gfycat
  nameWithType: Gfycat
  fullName: Gfycat
- uid: Gfycat.IFolderInfo.GetContentsAsync(Gfycat.RequestOptions)
  commentId: M:Gfycat.IFolderInfo.GetContentsAsync(Gfycat.RequestOptions)
  parent: Gfycat.IFolderInfo
  isExternal: false
  name: GetContentsAsync(RequestOptions)
  nameWithType: IFolderInfo.GetContentsAsync(RequestOptions)
  fullName: Gfycat.IFolderInfo.GetContentsAsync(Gfycat.RequestOptions)
  spec.csharp:
  - uid: Gfycat.IFolderInfo.GetContentsAsync(Gfycat.RequestOptions)
    name: GetContentsAsync
    nameWithType: IFolderInfo.GetContentsAsync
    fullName: Gfycat.IFolderInfo.GetContentsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Gfycat.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Gfycat.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Gfycat.IFolderInfo.GetContentsAsync(Gfycat.RequestOptions)
    name: GetContentsAsync
    nameWithType: IFolderInfo.GetContentsAsync
    fullName: Gfycat.IFolderInfo.GetContentsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Gfycat.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Gfycat.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Gfycat.IFolderInfo.MoveFolderAsync(Gfycat.IFolderInfo,Gfycat.RequestOptions)
  commentId: M:Gfycat.IFolderInfo.MoveFolderAsync(Gfycat.IFolderInfo,Gfycat.RequestOptions)
  parent: Gfycat.IFolderInfo
  isExternal: false
  name: MoveFolderAsync(IFolderInfo, RequestOptions)
  nameWithType: IFolderInfo.MoveFolderAsync(IFolderInfo, RequestOptions)
  fullName: Gfycat.IFolderInfo.MoveFolderAsync(Gfycat.IFolderInfo, Gfycat.RequestOptions)
  spec.csharp:
  - uid: Gfycat.IFolderInfo.MoveFolderAsync(Gfycat.IFolderInfo,Gfycat.RequestOptions)
    name: MoveFolderAsync
    nameWithType: IFolderInfo.MoveFolderAsync
    fullName: Gfycat.IFolderInfo.MoveFolderAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Gfycat.IFolderInfo
    name: IFolderInfo
    nameWithType: IFolderInfo
    fullName: Gfycat.IFolderInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Gfycat.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Gfycat.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Gfycat.IFolderInfo.MoveFolderAsync(Gfycat.IFolderInfo,Gfycat.RequestOptions)
    name: MoveFolderAsync
    nameWithType: IFolderInfo.MoveFolderAsync
    fullName: Gfycat.IFolderInfo.MoveFolderAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Gfycat.IFolderInfo
    name: IFolderInfo
    nameWithType: IFolderInfo
    fullName: Gfycat.IFolderInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Gfycat.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Gfycat.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Gfycat.IFolderInfo.CreateNewFolderAsync(System.String,Gfycat.RequestOptions)
  commentId: M:Gfycat.IFolderInfo.CreateNewFolderAsync(System.String,Gfycat.RequestOptions)
  parent: Gfycat.IFolderInfo
  isExternal: true
  name: CreateNewFolderAsync(String, RequestOptions)
  nameWithType: IFolderInfo.CreateNewFolderAsync(String, RequestOptions)
  fullName: Gfycat.IFolderInfo.CreateNewFolderAsync(System.String, Gfycat.RequestOptions)
  spec.csharp:
  - uid: Gfycat.IFolderInfo.CreateNewFolderAsync(System.String,Gfycat.RequestOptions)
    name: CreateNewFolderAsync
    nameWithType: IFolderInfo.CreateNewFolderAsync
    fullName: Gfycat.IFolderInfo.CreateNewFolderAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Gfycat.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Gfycat.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Gfycat.IFolderInfo.CreateNewFolderAsync(System.String,Gfycat.RequestOptions)
    name: CreateNewFolderAsync
    nameWithType: IFolderInfo.CreateNewFolderAsync
    fullName: Gfycat.IFolderInfo.CreateNewFolderAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Gfycat.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Gfycat.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Gfycat.IFolder.Id
  commentId: P:Gfycat.IFolder.Id
  parent: Gfycat.IFolder
  isExternal: false
  name: Id
  nameWithType: IFolder.Id
  fullName: Gfycat.IFolder.Id
- uid: Gfycat.IFolder.Title
  commentId: P:Gfycat.IFolder.Title
  parent: Gfycat.IFolder
  isExternal: false
  name: Title
  nameWithType: IFolder.Title
  fullName: Gfycat.IFolder.Title
- uid: Gfycat.IFolder.ModifyTitleAsync(System.String,Gfycat.RequestOptions)
  commentId: M:Gfycat.IFolder.ModifyTitleAsync(System.String,Gfycat.RequestOptions)
  parent: Gfycat.IFolder
  isExternal: true
  name: ModifyTitleAsync(String, RequestOptions)
  nameWithType: IFolder.ModifyTitleAsync(String, RequestOptions)
  fullName: Gfycat.IFolder.ModifyTitleAsync(System.String, Gfycat.RequestOptions)
  spec.csharp:
  - uid: Gfycat.IFolder.ModifyTitleAsync(System.String,Gfycat.RequestOptions)
    name: ModifyTitleAsync
    nameWithType: IFolder.ModifyTitleAsync
    fullName: Gfycat.IFolder.ModifyTitleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Gfycat.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Gfycat.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Gfycat.IFolder.ModifyTitleAsync(System.String,Gfycat.RequestOptions)
    name: ModifyTitleAsync
    nameWithType: IFolder.ModifyTitleAsync
    fullName: Gfycat.IFolder.ModifyTitleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Gfycat.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Gfycat.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Gfycat.IFolder.DeleteAsync(Gfycat.RequestOptions)
  commentId: M:Gfycat.IFolder.DeleteAsync(Gfycat.RequestOptions)
  parent: Gfycat.IFolder
  isExternal: false
  name: DeleteAsync(RequestOptions)
  nameWithType: IFolder.DeleteAsync(RequestOptions)
  fullName: Gfycat.IFolder.DeleteAsync(Gfycat.RequestOptions)
  spec.csharp:
  - uid: Gfycat.IFolder.DeleteAsync(Gfycat.RequestOptions)
    name: DeleteAsync
    nameWithType: IFolder.DeleteAsync
    fullName: Gfycat.IFolder.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Gfycat.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Gfycat.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Gfycat.IFolder.DeleteAsync(Gfycat.RequestOptions)
    name: DeleteAsync
    nameWithType: IFolder.DeleteAsync
    fullName: Gfycat.IFolder.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Gfycat.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Gfycat.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Gfycat.IFolderInfo
  commentId: T:Gfycat.IFolderInfo
  parent: Gfycat
  isExternal: false
  name: IFolderInfo
  nameWithType: IFolderInfo
  fullName: Gfycat.IFolderInfo
- uid: Gfycat.IFolder
  commentId: T:Gfycat.IFolder
  parent: Gfycat
  isExternal: false
  name: IFolder
  nameWithType: IFolder
  fullName: Gfycat.IFolder
- uid: Gfycat.IAlbumInfo.Subfolders*
  commentId: Overload:Gfycat.IAlbumInfo.Subfolders
  isExternal: false
  name: Subfolders
  nameWithType: IAlbumInfo.Subfolders
  fullName: Gfycat.IAlbumInfo.Subfolders
- uid: IReadOnlyCollection{Gfycat.IAlbumInfo}
  commentId: '!:IReadOnlyCollection{Gfycat.IAlbumInfo}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<IAlbumInfo>
  nameWithType: IReadOnlyCollection<IAlbumInfo>
  fullName: IReadOnlyCollection<Gfycat.IAlbumInfo>
  nameWithType.vb: IReadOnlyCollection(Of IAlbumInfo)
  fullName.vb: IReadOnlyCollection(Of Gfycat.IAlbumInfo)
  name.vb: IReadOnlyCollection(Of IAlbumInfo)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Gfycat.IAlbumInfo
    name: IAlbumInfo
    nameWithType: IAlbumInfo
    fullName: Gfycat.IAlbumInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Gfycat.IAlbumInfo
    name: IAlbumInfo
    nameWithType: IAlbumInfo
    fullName: Gfycat.IAlbumInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<>
  nameWithType: IReadOnlyCollection<>
  fullName: IReadOnlyCollection<>
  nameWithType.vb: IReadOnlyCollection(Of )
  fullName.vb: IReadOnlyCollection(Of )
  name.vb: IReadOnlyCollection(Of )
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Gfycat.IAlbumInfo.Published*
  commentId: Overload:Gfycat.IAlbumInfo.Published
  isExternal: false
  name: Published
  nameWithType: IAlbumInfo.Published
  fullName: Gfycat.IAlbumInfo.Published
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
