### YamlMime:ManagedReference
items:
- uid: Gfycat.IFolderContent
  commentId: T:Gfycat.IFolderContent
  id: IFolderContent
  parent: Gfycat
  children:
  - Gfycat.IFolderContent.Content
  - Gfycat.IFolderContent.Count
  - Gfycat.IFolderContent.MoveGfysAsync(Gfycat.IFolderContent,IEnumerable{Gfycat.Gfy},Gfycat.RequestOptions)
  langs:
  - csharp
  - vb
  name: IFolderContent
  nameWithType: IFolderContent
  fullName: Gfycat.IFolderContent
  type: Interface
  source:
    id: IFolderContent
    path: ''
    startLine: 3438
  assemblies:
  - cs.temp.dll
  namespace: Gfycat
  summary: "\nDefines a folder's content\n"
  example: []
  syntax:
    content: 'public interface IFolderContent : IFolder, IUpdatable'
    content.vb: >-
      Public Interface IFolderContent
          Inherits IFolder, IUpdatable
  inheritedMembers:
  - Gfycat.IFolder.Id
  - Gfycat.IFolder.Title
  - Gfycat.IFolder.ModifyTitleAsync(System.String,Gfycat.RequestOptions)
  - Gfycat.IFolder.DeleteAsync(Gfycat.RequestOptions)
  - Gfycat.IUpdatable.UpdateAsync(Gfycat.RequestOptions)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Gfycat.IFolderContent.Count
  commentId: P:Gfycat.IFolderContent.Count
  id: Count
  parent: Gfycat.IFolderContent
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: IFolderContent.Count
  fullName: Gfycat.IFolderContent.Count
  type: Property
  source:
    id: Count
    path: ''
    startLine: 3443
  assemblies:
  - cs.temp.dll
  namespace: Gfycat
  summary: "\nGets the number of gfys in this folder\n"
  example: []
  syntax:
    content: int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property Count As Integer
  overload: Gfycat.IFolderContent.Count*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Gfycat.IFolderContent.Content
  commentId: P:Gfycat.IFolderContent.Content
  id: Content
  parent: Gfycat.IFolderContent
  langs:
  - csharp
  - vb
  name: Content
  nameWithType: IFolderContent.Content
  fullName: Gfycat.IFolderContent.Content
  type: Property
  source:
    id: Content
    path: ''
    startLine: 3447
  assemblies:
  - cs.temp.dll
  namespace: Gfycat
  summary: "\nGets the content of this folder\n"
  example: []
  syntax:
    content: IReadOnlyCollection<Gfy> Content { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Gfycat.Gfy}
    content.vb: ReadOnly Property Content As IReadOnlyCollection(Of Gfy)
  overload: Gfycat.IFolderContent.Content*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Gfycat.IFolderContent.MoveGfysAsync(Gfycat.IFolderContent,IEnumerable{Gfycat.Gfy},Gfycat.RequestOptions)
  commentId: M:Gfycat.IFolderContent.MoveGfysAsync(Gfycat.IFolderContent,IEnumerable{Gfycat.Gfy},Gfycat.RequestOptions)
  id: MoveGfysAsync(Gfycat.IFolderContent,IEnumerable{Gfycat.Gfy},Gfycat.RequestOptions)
  parent: Gfycat.IFolderContent
  langs:
  - csharp
  - vb
  name: MoveGfysAsync(IFolderContent, IEnumerable<Gfy>, RequestOptions)
  nameWithType: IFolderContent.MoveGfysAsync(IFolderContent, IEnumerable<Gfy>, RequestOptions)
  fullName: Gfycat.IFolderContent.MoveGfysAsync(Gfycat.IFolderContent, IEnumerable<Gfycat.Gfy>, Gfycat.RequestOptions)
  type: Method
  source:
    id: MoveGfysAsync
    path: ''
    startLine: 3455
  assemblies:
  - cs.temp.dll
  namespace: Gfycat
  summary: "\nMoves the specified gfys to another folder\n"
  example: []
  syntax:
    content: Task MoveGfysAsync(IFolderContent folderToMoveTo, IEnumerable<Gfy> gfysToMove, RequestOptions options = null)
    parameters:
    - id: folderToMoveTo
      type: Gfycat.IFolderContent
      description: ''
    - id: gfysToMove
      type: IEnumerable{Gfycat.Gfy}
      description: ''
    - id: options
      type: Gfycat.RequestOptions
      description: ''
    return:
      type: Task
      description: ''
    content.vb: Function MoveGfysAsync(folderToMoveTo As IFolderContent, gfysToMove As IEnumerable(Of Gfy), options As RequestOptions = Nothing) As Task
  overload: Gfycat.IFolderContent.MoveGfysAsync*
  nameWithType.vb: IFolderContent.MoveGfysAsync(IFolderContent, IEnumerable(Of Gfy), RequestOptions)
  fullName.vb: Gfycat.IFolderContent.MoveGfysAsync(Gfycat.IFolderContent, IEnumerable(Of Gfycat.Gfy), Gfycat.RequestOptions)
  name.vb: MoveGfysAsync(IFolderContent, IEnumerable(Of Gfy), RequestOptions)
references:
- uid: Gfycat
  commentId: N:Gfycat
  isExternal: false
  name: Gfycat
  nameWithType: Gfycat
  fullName: Gfycat
- uid: Gfycat.IFolder.Id
  commentId: P:Gfycat.IFolder.Id
  parent: Gfycat.IFolder
  isExternal: false
  name: Id
  nameWithType: IFolder.Id
  fullName: Gfycat.IFolder.Id
- uid: Gfycat.IFolder.Title
  commentId: P:Gfycat.IFolder.Title
  parent: Gfycat.IFolder
  isExternal: false
  name: Title
  nameWithType: IFolder.Title
  fullName: Gfycat.IFolder.Title
- uid: Gfycat.IFolder.ModifyTitleAsync(System.String,Gfycat.RequestOptions)
  commentId: M:Gfycat.IFolder.ModifyTitleAsync(System.String,Gfycat.RequestOptions)
  parent: Gfycat.IFolder
  isExternal: true
  name: ModifyTitleAsync(String, RequestOptions)
  nameWithType: IFolder.ModifyTitleAsync(String, RequestOptions)
  fullName: Gfycat.IFolder.ModifyTitleAsync(System.String, Gfycat.RequestOptions)
  spec.csharp:
  - uid: Gfycat.IFolder.ModifyTitleAsync(System.String,Gfycat.RequestOptions)
    name: ModifyTitleAsync
    nameWithType: IFolder.ModifyTitleAsync
    fullName: Gfycat.IFolder.ModifyTitleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Gfycat.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Gfycat.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Gfycat.IFolder.ModifyTitleAsync(System.String,Gfycat.RequestOptions)
    name: ModifyTitleAsync
    nameWithType: IFolder.ModifyTitleAsync
    fullName: Gfycat.IFolder.ModifyTitleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Gfycat.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Gfycat.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Gfycat.IFolder.DeleteAsync(Gfycat.RequestOptions)
  commentId: M:Gfycat.IFolder.DeleteAsync(Gfycat.RequestOptions)
  parent: Gfycat.IFolder
  isExternal: false
  name: DeleteAsync(RequestOptions)
  nameWithType: IFolder.DeleteAsync(RequestOptions)
  fullName: Gfycat.IFolder.DeleteAsync(Gfycat.RequestOptions)
  spec.csharp:
  - uid: Gfycat.IFolder.DeleteAsync(Gfycat.RequestOptions)
    name: DeleteAsync
    nameWithType: IFolder.DeleteAsync
    fullName: Gfycat.IFolder.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Gfycat.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Gfycat.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Gfycat.IFolder.DeleteAsync(Gfycat.RequestOptions)
    name: DeleteAsync
    nameWithType: IFolder.DeleteAsync
    fullName: Gfycat.IFolder.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Gfycat.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Gfycat.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Gfycat.IUpdatable.UpdateAsync(Gfycat.RequestOptions)
  commentId: M:Gfycat.IUpdatable.UpdateAsync(Gfycat.RequestOptions)
  parent: Gfycat.IUpdatable
  isExternal: false
  name: UpdateAsync(RequestOptions)
  nameWithType: IUpdatable.UpdateAsync(RequestOptions)
  fullName: Gfycat.IUpdatable.UpdateAsync(Gfycat.RequestOptions)
  spec.csharp:
  - uid: Gfycat.IUpdatable.UpdateAsync(Gfycat.RequestOptions)
    name: UpdateAsync
    nameWithType: IUpdatable.UpdateAsync
    fullName: Gfycat.IUpdatable.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Gfycat.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Gfycat.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Gfycat.IUpdatable.UpdateAsync(Gfycat.RequestOptions)
    name: UpdateAsync
    nameWithType: IUpdatable.UpdateAsync
    fullName: Gfycat.IUpdatable.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Gfycat.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Gfycat.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Gfycat.IFolder
  commentId: T:Gfycat.IFolder
  parent: Gfycat
  isExternal: false
  name: IFolder
  nameWithType: IFolder
  fullName: Gfycat.IFolder
- uid: Gfycat.IUpdatable
  commentId: T:Gfycat.IUpdatable
  parent: Gfycat
  isExternal: false
  name: IUpdatable
  nameWithType: IUpdatable
  fullName: Gfycat.IUpdatable
- uid: Gfycat.IFolderContent.Count*
  commentId: Overload:Gfycat.IFolderContent.Count
  isExternal: false
  name: Count
  nameWithType: IFolderContent.Count
  fullName: Gfycat.IFolderContent.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Gfycat.IFolderContent.Content*
  commentId: Overload:Gfycat.IFolderContent.Content
  isExternal: false
  name: Content
  nameWithType: IFolderContent.Content
  fullName: Gfycat.IFolderContent.Content
- uid: IReadOnlyCollection{Gfycat.Gfy}
  commentId: '!:IReadOnlyCollection{Gfycat.Gfy}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<Gfy>
  nameWithType: IReadOnlyCollection<Gfy>
  fullName: IReadOnlyCollection<Gfycat.Gfy>
  nameWithType.vb: IReadOnlyCollection(Of Gfy)
  fullName.vb: IReadOnlyCollection(Of Gfycat.Gfy)
  name.vb: IReadOnlyCollection(Of Gfy)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Gfycat.Gfy
    name: Gfy
    nameWithType: Gfy
    fullName: Gfycat.Gfy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Gfycat.Gfy
    name: Gfy
    nameWithType: Gfy
    fullName: Gfycat.Gfy
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<>
  nameWithType: IReadOnlyCollection<>
  fullName: IReadOnlyCollection<>
  nameWithType.vb: IReadOnlyCollection(Of )
  fullName.vb: IReadOnlyCollection(Of )
  name.vb: IReadOnlyCollection(Of )
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Gfycat.IFolderContent.MoveGfysAsync*
  commentId: Overload:Gfycat.IFolderContent.MoveGfysAsync
  isExternal: false
  name: MoveGfysAsync
  nameWithType: IFolderContent.MoveGfysAsync
  fullName: Gfycat.IFolderContent.MoveGfysAsync
- uid: Gfycat.IFolderContent
  commentId: T:Gfycat.IFolderContent
  parent: Gfycat
  isExternal: false
  name: IFolderContent
  nameWithType: IFolderContent
  fullName: Gfycat.IFolderContent
- uid: IEnumerable{Gfycat.Gfy}
  commentId: '!:IEnumerable{Gfycat.Gfy}'
  definition: IEnumerable`1
  name: IEnumerable<Gfy>
  nameWithType: IEnumerable<Gfy>
  fullName: IEnumerable<Gfycat.Gfy>
  nameWithType.vb: IEnumerable(Of Gfy)
  fullName.vb: IEnumerable(Of Gfycat.Gfy)
  name.vb: IEnumerable(Of Gfy)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Gfycat.Gfy
    name: Gfy
    nameWithType: Gfy
    fullName: Gfycat.Gfy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Gfycat.Gfy
    name: Gfy
    nameWithType: Gfy
    fullName: Gfycat.Gfy
  - name: )
    nameWithType: )
    fullName: )
- uid: Gfycat.RequestOptions
  commentId: T:Gfycat.RequestOptions
  parent: Gfycat
  isExternal: false
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Gfycat.RequestOptions
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
